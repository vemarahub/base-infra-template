name: 'Start Self-Hosted Runner'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to start runner in'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      runner_token:
        description: 'GitHub Runner Registration Token'
        required: true
        type: string
      runner_name:
        description: 'Custom runner name (optional)'
        required: false
        type: string
        default: ''

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  start-runner:
    name: 'Configure and Start Runner'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get EC2 Instance Information
      id: get-instance
      run: |
        echo "Getting EC2 instance information..."
        
        # Get instance ID by tag
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=base-github-runner" \
                   "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].InstanceId" \
          --output text)
        
        if [ "$INSTANCE_ID" = "None" ] || [ "$INSTANCE_ID" = "null" ]; then
          echo "‚ùå No running EC2 instance found with tag: base-github-runner"
          exit 1
        fi
        
        # Get public IP
        PUBLIC_IP=$(aws ec2 describe-instances \
          --instance-ids $INSTANCE_ID \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
          --output text)
        
        if [ "$PUBLIC_IP" = "None" ] || [ "$PUBLIC_IP" = "null" ]; then
          echo "‚ùå Instance found but no public IP available"
          exit 1
        fi
        
        echo "‚úÖ Found instance: $INSTANCE_ID"
        echo "‚úÖ Public IP: $PUBLIC_IP"
        
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
        echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

    - name: Setup SSH Key
      run: |
        echo "Setting up SSH key..."
        mkdir -p ~/.ssh
        
        # First, try to get SSH key from RUNNER_SSH_PRIVATE_KEY secret
        if [ -n "${{ secrets.RUNNER_SSH_PRIVATE_KEY }}" ]; then
          echo "Using SSH key from RUNNER_SSH_PRIVATE_KEY secret..."
          echo "${{ secrets.RUNNER_SSH_PRIVATE_KEY }}" > ~/.ssh/runner_key
        else
          echo "RUNNER_SSH_PRIVATE_KEY secret not found."
          echo "Attempting to download SSH key from deploy-runner artifacts..."
          
          # Try to download the most recent SSH key artifact
          # This requires the GitHub CLI which is available in GitHub Actions
          
          # Get the most recent successful deploy-runner workflow run
          WORKFLOW_RUN_ID=$(gh run list \
            --workflow="deploy-runner.yml" \
            --status=success \
            --limit=1 \
            --json=databaseId \
            --jq='.[0].databaseId' || echo "")
          
          if [ -n "$WORKFLOW_RUN_ID" ] && [ "$WORKFLOW_RUN_ID" != "null" ]; then
            echo "Found deploy-runner workflow run: $WORKFLOW_RUN_ID"
            
            # Download the SSH key artifact
            gh run download $WORKFLOW_RUN_ID \
              --name "runner-ssh-key-${{ secrets.PROJECT_NAME }}" \
              --dir /tmp/ssh-key/ || {
              echo "‚ùå Failed to download SSH key artifact"
              echo "Please either:"
              echo "1. Set the RUNNER_SSH_PRIVATE_KEY secret manually, or"
              echo "2. Re-run the deploy-runner workflow to generate a new key"
              exit 1
            }
            
            # Copy the downloaded key
            if [ -f "/tmp/ssh-key/runner_key" ]; then
              cp /tmp/ssh-key/runner_key ~/.ssh/runner_key
              echo "‚úÖ SSH key downloaded from artifacts"
            else
              echo "‚ùå SSH key file not found in downloaded artifact"
              exit 1
            fi
          else
            echo "‚ùå No successful deploy-runner workflow run found"
            echo "Please either:"
            echo "1. Run the deploy-runner workflow first to create the EC2 instance and SSH key, or"
            echo "2. Set the RUNNER_SSH_PRIVATE_KEY secret manually"
            exit 1
          fi
        fi
        
        # Fix potential line ending issues and ensure proper format
        sed -i 's/\r$//' ~/.ssh/runner_key
        
        # Ensure the key starts and ends properly
        if ! grep -q "BEGIN.*PRIVATE KEY" ~/.ssh/runner_key; then
          echo "‚ùå SSH private key format appears invalid"
          echo "Key should start with '-----BEGIN [RSA/OPENSSH/EC] PRIVATE KEY-----'"
          echo ""
          echo "If you used deploy-runner.yml workflow:"
          echo "1. Go to the deploy-runner workflow run"
          echo "2. Download the 'runner-ssh-key-*' artifact"
          echo "3. Copy the content to RUNNER_SSH_PRIVATE_KEY secret"
          echo ""
          echo "Or run this command to set it automatically:"
          echo "gh secret set RUNNER_SSH_PRIVATE_KEY < path/to/downloaded/runner_key"
          exit 1
        fi
        
        # Set proper permissions
        chmod 600 ~/.ssh/runner_key
        
        # Verify key format
        ssh-keygen -l -f ~/.ssh/runner_key || {
          echo "‚ùå SSH key validation failed"
          echo "Please check that the SSH key is in the correct format"
          exit 1
        }
        
        # Add to known hosts to avoid prompt
        ssh-keyscan -H ${{ steps.get-instance.outputs.public_ip }} >> ~/.ssh/known_hosts 2>/dev/null
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Wait for Instance to be Ready
      run: |
        echo "Waiting for instance to be fully ready..."
        
        # Wait for instance status checks to pass
        aws ec2 wait instance-status-ok --instance-ids ${{ steps.get-instance.outputs.instance_id }}
        
        echo "‚úÖ Instance status checks passed"
        
        # Additional wait for SSH to be ready
        echo "Waiting for SSH to be available..."
        for i in {1..30}; do
          if timeout 10 ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i ~/.ssh/runner_key ubuntu@${{ steps.get-instance.outputs.public_ip }} echo "SSH Ready" 2>/dev/null; then
            echo "‚úÖ SSH is ready"
            break
          fi
          echo "Attempt $i/30: SSH not ready yet, waiting 10 seconds..."
          sleep 10
        done

    - name: Generate Runner Name
      id: runner-name
      run: |
        if [ -n "${{ github.event.inputs.runner_name }}" ]; then
          RUNNER_NAME="${{ github.event.inputs.runner_name }}"
        else
          # Generate a unique runner name
          RANDOM_SUFFIX=$(openssl rand -hex 4)
          RUNNER_NAME="github-runner-${{ github.event.inputs.environment }}-${RANDOM_SUFFIX}"
        fi
        
        echo "runner_name=$RUNNER_NAME" >> $GITHUB_OUTPUT
        echo "‚úÖ Runner name: $RUNNER_NAME"

    - name: Configure GitHub Runner
      run: |
        echo "Configuring GitHub Runner on EC2 instance..."
        
        # Create the configuration script
        cat > configure_runner.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "üöÄ Starting GitHub Runner configuration..."
        
        # Check if runner is already configured
        if [ -f "/home/ubuntu/actions-runner/.runner" ]; then
          echo "‚ö†Ô∏è  Runner appears to be already configured. Removing existing configuration..."
          cd /home/ubuntu/actions-runner
          sudo ./svc.sh stop || true
          sudo ./svc.sh uninstall || true
          ./config.sh remove --token $1 || true
        fi
        
        # Navigate to actions-runner directory
        cd /home/ubuntu/actions-runner
        
        echo "üìù Configuring runner with GitHub..."
        ./config.sh \
          --url https://github.com/vemarahub/base-infra-template \
          --token $1 \
          --name $2 \
          --labels linux,x64,aws,self-hosted,$3 \
          --unattended
        
        echo "üîß Installing runner service..."
        sudo ./svc.sh install ubuntu
        
        echo "‚ñ∂Ô∏è  Starting runner service..."
        sudo ./svc.sh start
        
        echo "üìä Checking runner status..."
        sudo ./svc.sh status
        
        echo "‚úÖ GitHub Runner configuration completed successfully!"
        echo "Runner Name: $2"
        echo "Environment: $3"
        EOF
        
        # Make script executable
        chmod +x configure_runner.sh
        
        # Copy script to EC2 instance
        scp -i ~/.ssh/runner_key configure_runner.sh ubuntu@${{ steps.get-instance.outputs.public_ip }}:/tmp/
        
        # Execute the configuration script on EC2 instance
        ssh -i ~/.ssh/runner_key ubuntu@${{ steps.get-instance.outputs.public_ip }} \
          "bash /tmp/configure_runner.sh '${{ github.event.inputs.runner_token }}' '${{ steps.runner-name.outputs.runner_name }}' '${{ github.event.inputs.environment }}'"

    - name: Verify Runner Status
      run: |
        echo "üîç Verifying runner status..."
        
        # Check if the runner service is active
        ssh -i ~/.ssh/runner_key ubuntu@${{ steps.get-instance.outputs.public_ip }} \
          "sudo systemctl is-active actions.runner.* || echo 'Service check failed'"
        
        # Check runner logs
        echo "üìã Recent runner logs:"
        ssh -i ~/.ssh/runner_key ubuntu@${{ steps.get-instance.outputs.public_ip }} \
          "sudo journalctl -u actions.runner.* --no-pager -n 10 || echo 'Log check failed'"

    - name: Output Runner Information
      run: |
        echo "üéâ Runner configuration completed!"
        echo ""
        echo "üìã Runner Details:"
        echo "  ‚Ä¢ Instance ID: ${{ steps.get-instance.outputs.instance_id }}"
        echo "  ‚Ä¢ Public IP: ${{ steps.get-instance.outputs.public_ip }}"
        echo "  ‚Ä¢ Runner Name: ${{ steps.runner-name.outputs.runner_name }}"
        echo "  ‚Ä¢ Environment: ${{ github.event.inputs.environment }}"
        echo "  ‚Ä¢ Repository: https://github.com/vemarahub/base-infra-template"
        echo ""
        echo "üîó You can now use this runner in your workflows by adding:"
        echo "    runs-on: self-hosted"
        echo ""
        echo "‚ö†Ô∏è  Remember to stop the runner when not needed to save costs!"

    - name: Cleanup
      if: always()
      run: |
        # Clean up SSH key and temporary files
        rm -f ~/.ssh/runner_key
        rm -f configure_runner.sh