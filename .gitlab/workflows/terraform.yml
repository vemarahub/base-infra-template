name: 'Terraform Infrastructure'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
    paths:
      - '**.tf'
      - '**.tfvars'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: self-hosted
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set Environment Variables
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "TF_VAR_environment=prod" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "TF_VAR_environment=dev" >> $GITHUB_ENV
        fi
        echo "TF_VAR_project_name=${{ secrets.PROJECT_NAME }}" >> $GITHUB_ENV
        echo "TF_VAR_aws_region=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

    - name: Bootstrap Terraform Backend (if needed)
      run: |
        # Always run bootstrap script - it will handle existing resources gracefully
        echo "Running Terraform backend bootstrap..."
        chmod +x scripts/bootstrap.sh
        ./scripts/bootstrap.sh --project "${{ secrets.PROJECT_NAME }}" --environment "${ENVIRONMENT}" --region "${{ secrets.AWS_REGION }}"

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      run: |
        if [ -f backend-config.hcl ]; then
          terraform init -backend-config=backend-config.hcl
        else
          terraform init
        fi

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -detailed-exitcode -no-color -out=tfplan
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: |
        (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
      run: terraform apply -auto-approve tfplan

    - name: Terraform Destroy
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
      run: terraform destroy -auto-approve

    - name: Output Infrastructure Details
      if: |
        (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
      run: |
        echo "## Infrastructure Outputs" >> $GITHUB_STEP_SUMMARY
        echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| CloudFront Domain | $(terraform output -raw cloudfront_domain_name) |" >> $GITHUB_STEP_SUMMARY
        echo "| Load Balancer DNS | $(terraform output -raw load_balancer_dns_name) |" >> $GITHUB_STEP_SUMMARY
        echo "| API Gateway URL | $(terraform output -raw api_gateway_url) |" >> $GITHUB_STEP_SUMMARY
        echo "| ECR Repository | $(terraform output -raw ecr_repository_url) |" >> $GITHUB_STEP_SUMMARY